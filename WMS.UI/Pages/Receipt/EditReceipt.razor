@page "/receipt/edit/{Id:guid}"
@using BlazorClient.Services
@using WMS.UI.Models.Enums
@using WMS.UI.Models.ReceiptDocument.Request
@using WMS.UI.Models.ReceiptItem.Request
@using WMS.UI.Models.Resource.Response
@using WMS.UI.Models.UnitOfMeasure.Response
@using WMS.UI.Services
@inject ILogger<EditReceipt> Logger
@inject ReceiptsService ReceiptsService
@inject ResourceService ResourceService
@inject UnitOfMeasureService UnitOfMeasureService
@inject NavigationManager NavigationManager

<h3 class="page-title">Редактирование документа поступления</h3>

@if (errorMessage != null)
{
    <div class="alert alert-danger">@errorMessage</div>
}

@if (isLoading)
{
    <p>Загрузка...</p>
}
else
{
    <div class="edit-form">
        <div class="form-group">
            <label>Номер заявки:</label>
            <input @bind="applicationNumber" class="form-control" />
        </div>

        <div class="form-group">
            <label>Дата:</label>
            <input type="date" @bind="date" class="form-control" />
        </div>

        <div class="items-section">
            <h4>Позиции:</h4>
            
            @foreach (var (item, index) in items.Select((item, i) => (item, i)))
            {
                <div class="item-card">
                    <div class="form-row">
                        <div class="form-group">
                            <label>Ресурс:</label>
                            <select @bind="item.ResourceId" class="form-control">
                                <option value="">Выберите ресурс</option>
                                @foreach (var resource in resources)
                                {
                                    <option value="@resource.Id">@resource.Title</option>
                                }
                            </select>
                        </div>

                        <div class="form-group">
                            <label>Ед. измерения:</label>
                            <select @bind="item.UnitOfMeasureId" class="form-control">
                                <option value="">Выберите единицу измерения</option>
                                @foreach (var unit in unitsOfMeasure)
                                {
                                    <option value="@unit.Id">@unit.Title</option>
                                }
                            </select>
                        </div>

                        <div class="form-group">
                            <label>Количество:</label>
                            <input type="number" @bind="item.Quantity" min="0.01" step="0.01" class="form-control" />
                        </div>

                        <button type="button" @onclick="() => RemoveItem(index)" class="btn btn-delete">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            }

            <button type="button" @onclick="AddItem" class="btn btn-add">
                <i class="fas fa-plus"></i> Добавить позицию
            </button>
        </div>

        <div class="form-actions">
            <button @onclick="SubmitForm" class="btn btn-primary" disabled="@isSubmitting">
                @if (isSubmitting)
                {
                    <span>Сохранение...</span>
                }
                else
                {
                    <span>Сохранить</span>
                }
            </button>
            <button @onclick="Cancel" class="btn btn-secondary">Отмена</button>
        </div>
    </div>
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    private string applicationNumber = "";
    private DateTime date = DateTime.Today;
    private List<ReceiptItemModel> items = new();
    
    private List<ResourceResponse> resources = new();
    private List<UnitOfMeasureResponse> unitsOfMeasure = new();
    
    private bool isLoading = true;
    private bool isSubmitting = false;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadResources();
            await LoadUnitsOfMeasure();
            
            var receipt = await ReceiptsService.GetByIdAsync(Id);
            
            if (receipt != null)
            {
                applicationNumber = receipt.ApplicationNumber;
                date = new DateTime(receipt.Date.Year, receipt.Date.Month, receipt.Date.Day, 0, 0, 0, DateTimeKind.Utc);

                
                items = receipt.Items.Select(i => new ReceiptItemModel
                {
                    Id = i.Id,
                    ResourceId = i.ResourceId,
                    UnitOfMeasureId = i.UnitOfMeasureId,
                    Quantity = i.Quantity
                }).ToList();
            }
            else
            {
                errorMessage = "Документ не найден";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Ошибка при загрузке документа");
            errorMessage = "Ошибка при загрузке документа";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadResources()
    {
        resources = await ResourceService.GetByStateAsync(State.Working);
    }

    private async Task LoadUnitsOfMeasure()
    {
        unitsOfMeasure = await UnitOfMeasureService.GetByStateAsync(State.Working);
    }

    private void AddItem()
    {
        items.Add(new ReceiptItemModel
        {
            Id = Guid.NewGuid(),
            ResourceId = Guid.Empty,
            UnitOfMeasureId = Guid.Empty,
            Quantity = 1
        });
    }

    private void RemoveItem(int index)
    {
        if (index >= 0 && index < items.Count)
        {
            items.RemoveAt(index);
        }
    }

    private async Task SubmitForm()
    {
        isSubmitting = true;
        errorMessage = null;
        
        try
        {
            if (string.IsNullOrWhiteSpace(applicationNumber))
            {
                errorMessage = "Номер заявки обязателен";
                return;
            }

            foreach (var item in items)
            {
                if (item.ResourceId == Guid.Empty)
                {
                    errorMessage = "Для всех позиций должен быть выбран ресурс";
                    return;
                }

                if (item.UnitOfMeasureId == Guid.Empty)
                {
                    errorMessage = "Для всех позиций должна быть выбрана единица измерения";
                    return;
                }

                if (item.Quantity <= 0)
                {
                    errorMessage = "Количество должно быть больше 0 для всех позиций";
                    return;
                }
            }
            
            var normalizedDate = new DateTime(date.Year, date.Month, date.Day, 0, 0, 0, DateTimeKind.Utc);

            var request = new ReceiptDocumentParamsRequest(
                applicationNumber.Trim(),
                normalizedDate,
                items.Select(i => new ReceiptItemParamsRequest(i.ResourceId, i.UnitOfMeasureId, i.Quantity)).ToList()
            );

            var (success, apiError) = await ReceiptsService.UpdateAsync(Id, request);

            if (success)
            {
                NavigationManager.NavigateTo("/receipts");
            }
            else
            {
                errorMessage = apiError ?? "Ошибка при сохранении документа";
                Logger.LogError("Ошибка при сохранении документа: {Error}", errorMessage);
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Ошибка при сохранении";
            Logger.LogError(ex, "Ошибка при сохранении документа");
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/receipts");
    }

    private class ReceiptItemModel
    {
        public Guid Id { get; set; }
        public Guid ResourceId { get; set; }
        public Guid UnitOfMeasureId { get; set; }
        public decimal Quantity { get; set; }
    }
}