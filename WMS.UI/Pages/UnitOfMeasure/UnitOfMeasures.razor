@page "/unit-of-measures"
@using BlazorClient.Services
@using WMS.UI.Models.Enums
@using WMS.UI.Models.UnitOfMeasure.Response
@inject UnitOfMeasureService UnitOfMeasureService
@inject NavigationManager NavigationManager

<h3>Единицы измерения</h3>

<div class="resource-actions">
    <div class="state-buttons">
        <button @onclick="() => LoadUnitOfMeasures(State.Working)" class="@(currentState == State.Working ? "active" : "")">Рабочие</button>
        <button @onclick="() => LoadUnitOfMeasures(State.Archived)" class="@(currentState == State.Archived ? "active" : "")">Архивные</button>
    </div>
    
    <div class="filters">
        <div class="filter-group">
            <input placeholder="Поиск..." @bind="searchTerm" @bind:event="oninput" class="form-control"/>
        </div>
        <button @onclick="ApplySearch" class="btn btn-primary">🔍</button>
    </div>
    
    <button @onclick="NavigateToCreate" class="add-button">Добавить</button>
</div>

@if (isLoading)
{
    <p>Загрузка...</p>
}
else if (!unitOfMeasures.Any())
{
    <p>Нет единиц измерения</p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Наименование</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var unit in unitOfMeasures)
        {
            <tr>
                <td>
                    <button @onclick="() => NavigateToEdit(unit.Id)" 
                            class="resource-button">
                        @unit.Title
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private List<UnitOfMeasureResponse> unitOfMeasures = new();
    private bool isLoading = true;
    private State currentState = State.Working;
    private string searchTerm = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadUnitOfMeasures(currentState);
    }

    private async Task LoadUnitOfMeasures(State state, string? search = null)
    {
        isLoading = true;
        currentState = state;
        unitOfMeasures = await UnitOfMeasureService.GetByStateAsync(state, search);
        isLoading = false;
    }

    private async Task ApplySearch()
    {
        await LoadUnitOfMeasures(currentState, searchTerm);
    }

    private void NavigateToCreate()
    {
        NavigationManager.NavigateTo("/unit-of-measure/create");
    }

    private void NavigateToEdit(Guid id)
    {
        NavigationManager.NavigateTo($"/unit-of-measure/edit/{id}");
    }
}