@page "/receipts"

<h2>Поступления</h2>

<div class="filters">
    <label>Период:</label>
    <div>
        <input type="date" @bind="startDate" />
        <input type="date" @bind="endDate" />
    </div>
    
    <label>Прикладной номер:</label>
    <input @bind="applicationNumber"/>

    <label>Ресурс:</label>
    <input @bind="resourceTitle"/>

    <label>Единица измерения:</label>
    <input @bind="unitOfMeasureTitle"/>
</div>

<table class="receipts-table">
    <thead>
        <tr>
            <th>Прикладной номер</th>
            <th>Дата</th>
            <th>Ресурс</th>
            <th>Единица</th>
            <th>Количество</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var doc in FilteredReceipts)
        {
            <tr class="doc-row">
                <td>@doc.ApplicationNumber</td>
                <td>@doc.Date.ToString("dd.MM.yyyy")</td>
                <td colspan="3"></td>
            </tr>

            @foreach (var item in doc.Items)
            {
                <tr class="item-row">
                    <td></td>
                    <td></td>
                    <td>@item.ResourceTitle</td>
                    <td>@item.UnitOfMeasureTitle</td>
                    <td>@item.Quantity</td>
                </tr>
            }
        }
    </tbody>
</table>

<style>
    .filters {
        margin-bottom: 20px;
    }
    .filters input {
        margin-bottom: 10px;
        margin-right: 20px;
    }
    .receipts-table {
        width: 100%;
        border-collapse: collapse;
    }
    .receipts-table th,
    .receipts-table td {
        border: 1px solid #ccc;
        padding: 8px;
        text-align: left;
    }
    .doc-row {
        background-color: #f0f8ff;
        font-weight: bold;
    }
    .item-row td {
        padding-left: 20px;
        background-color: #fafafa;
    }
</style>

@code {
    private string applicationNumber;
    private string resourceTitle;
    private string unitOfMeasureTitle;
    private DateTime? startDate;
    private DateTime? endDate;

    private List<ReceiptDocument> receipts = new()
    {
        new ReceiptDocument
        {
            Id = Guid.NewGuid(),
            ApplicationNumber = "srp-0001",
            Date = DateTime.Now,
            Items = new List<ReceiptItem>
            {
                new ReceiptItem { ResourceTitle = "шины", UnitOfMeasureTitle = "шт", Quantity = 4 },
                new ReceiptItem { ResourceTitle = "мука", UnitOfMeasureTitle = "кг", Quantity = 100 }
            }
        },
        new ReceiptDocument
        {
            Id = Guid.NewGuid(),
            ApplicationNumber = "srp-0002",
            Date = DateTime.Now.AddDays(-5),
            Items = new List<ReceiptItem>
            {
                new ReceiptItem { ResourceTitle = "кирпич", UnitOfMeasureTitle = "шт", Quantity = 500 }
            }
        }
    };

    private IEnumerable<ReceiptDocument> FilteredReceipts =>
        receipts.Where(doc =>
            (string.IsNullOrWhiteSpace(applicationNumber) || doc.ApplicationNumber.Contains(applicationNumber, StringComparison.OrdinalIgnoreCase)) &&
            (!startDate.HasValue || doc.Date.Date >= startDate.Value.Date) &&
            (!endDate.HasValue || doc.Date.Date <= endDate.Value.Date) &&
            doc.Items.Any(item =>
                (string.IsNullOrWhiteSpace(resourceTitle) || item.ResourceTitle.Contains(resourceTitle, StringComparison.OrdinalIgnoreCase)) &&
                (string.IsNullOrWhiteSpace(unitOfMeasureTitle) || item.UnitOfMeasureTitle.Contains(unitOfMeasureTitle, StringComparison.OrdinalIgnoreCase))
            )
        );

    public class ReceiptDocument
    {
        public Guid Id { get; set; }
        public string ApplicationNumber { get; set; }
        public DateTime Date { get; set; }
        public List<ReceiptItem> Items { get; set; }
    }

    public class ReceiptItem
    {
        public string ResourceTitle { get; set; }
        public string UnitOfMeasureTitle { get; set; }
        public decimal Quantity { get; set; }
    }
}
